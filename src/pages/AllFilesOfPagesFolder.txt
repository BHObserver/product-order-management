//OrderPage.js

import React, { useState } from 'react';
import ProductDropdown from '../components/ProductDropdown';

const OrderPage = () => {
  const [selectedProduct, setSelectedProduct] = useState(null);

  const handleProductSelect = (product) => {
    setSelectedProduct(product);
  };

  const handleOrderSubmit = (e) => {
    e.preventDefault();
    // Handle order submission logic here
    console.log('Order submitted for product:', selectedProduct);
  };

  return (
    <div>
      <h2>Order a Product</h2>
      <ProductDropdown onSelect={handleProductSelect} />
      {selectedProduct && (
        <div>
          <h3>Selected Product Details</h3>
          <p>
            Name:
            {selectedProduct.name}
          </p>
          <p>
            Brand:
            {selectedProduct.brand}
          </p>
          <p>
            Type:
            {selectedProduct.type}
          </p>
          <p>
            Origin:
            {selectedProduct.origin}
          </p>
          <ul>
            {selectedProduct.variants.map((variant) => (
              <li key={variant.id}>
                Color:
                {' '}
                {variant.color}
                , Specification:
                {' '}
                {variant.specification}
                , Size:
                {' '}
                {variant.size}
              </li>
            ))}
          </ul>
          <button type="button" onClick={handleOrderSubmit}>Submit Order</button>
        </div>
      )}
    </div>
  );
};

export default OrderPage;

// OrdersPage.js

import React, { useState, useEffect } from 'react';
import {
  getOrders, createOrder, updateOrder, deleteOrder,
} from '../services/api';
import OrderList from '../components/OrderList';
import OrderForm from '../components/OrderForm';

function OrdersPage() {
  const [orders, setOrders] = useState([]);
  const [editingOrder, setEditingOrder] = useState(null);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState('');

  const fetchOrders = async () => {
    try {
      const response = await getOrders();
      setOrders(Array.isArray(response.data.data) ? response.data.data : []);
    } catch (err) {
      setError('Failed to fetch orders');
      console.error(err);
    }
  };

  useEffect(() => {
    fetchOrders();
  }, []);

  const handleCreateOrUpdateOrder = async (order) => {
    try {
      if (editingOrder) {
        await updateOrder(editingOrder.id, order);
      } else {
        await createOrder(order);
        setSuccessMessage('Successfully Added');
        setTimeout(() => setSuccessMessage(''), 3000); // Clear message after 3 seconds
      }
      fetchOrders();
      setEditingOrder(null);
    } catch (err) {
      setError('Failed to save order');
      console.error(err);
    }
  };

  const handleEditOrder = (id) => {
    const order = orders.find((o) => o.id === id);
    setEditingOrder(order);
  };

  const handleDeleteOrder = async (id) => {
    try {
      await deleteOrder(id);
      fetchOrders();
    } catch (err) {
      setError('Failed to delete order');
      console.error(err);
    }
  };

  return (
    <div>
      <h1>Orders</h1>
      {error && <p style={{ color: 'red' }}>{error}</p>}
      {successMessage && <p style={{ color: 'green' }}>{successMessage}</p>}
      <OrderForm onSubmit={handleCreateOrUpdateOrder} order={editingOrder} />
      <OrderList orders={orders} onEdit={handleEditOrder} onDelete={handleDeleteOrder} />
    </div>
  );
}

export default OrdersPage;

// ProductsPage.js

import React, { useState, useEffect } from 'react';
import {
  getProducts, createProduct, updateProduct, deleteProduct,
} from '../services/api';
import ProductList from '../components/ProductList';
import ProductForm from '../components/ProductForm';

const ProductsPage = () => {
  const [products, setProducts] = useState([]);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [isFormVisible, setFormVisible] = useState(false);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await getProducts();
        console.log('Fetched products data:', response); // Log the fetched data to understand its structure
        setProducts(Array.isArray(response.data.data) ? response.data.data : []);
      } catch (error) {
        console.error('Failed to fetch products:', error);
      }
    };

    fetchProducts();
  }, []);

  const handleCreate = () => {
    setSelectedProduct(null);
    setFormVisible(true);
  };

  const handleEdit = (product) => {
    setSelectedProduct(product);
    setFormVisible(true);
  };

  const handleDelete = async (id) => {
    try {
      await deleteProduct(id);
      setProducts(products.filter((product) => product.id !== id));
    } catch (error) {
      console.error('Failed to delete product:', error);
    }
  };

  const handleSubmit = async (product) => {
    try {
      if (selectedProduct) {
        const updatedProduct = await updateProduct(selectedProduct.id, product);
        setProducts(products.map((p) => (p.id === selectedProduct.id ? updatedProduct : p)));
      } else {
        const newProduct = await createProduct(product);
        setProducts([...products, newProduct]);
      }
      setFormVisible(false);
    } catch (error) {
      console.error('Failed to save product:', error);
    }
  };

  return (
    <div>
      <button type="button" onClick={handleCreate}>Create Product</button>
      {isFormVisible && (
        <ProductForm product={selectedProduct} onSubmit={handleSubmit} />
      )}
      <ProductList products={products} onEdit={handleEdit} onDelete={handleDelete} />
    </div>
  );
};

export default ProductsPage;
